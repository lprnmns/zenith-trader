version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zenith-trader-postgres
    environment:
      POSTGRES_DB: zenith_trader_prod
      POSTGRES_USER: zenith_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - zenith-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zenith_user -d zenith_trader_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zenith-trader-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - zenith-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zenith-trader-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://zenith_user:${POSTGRES_PASSWORD}@postgres:5432/zenith_trader_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - ZERION_API_KEY=${ZERION_API_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_IV=${ENCRYPTION_IV}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - METRICS_PORT=${METRICS_PORT}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT}
      - BACKUP_ENABLED=${BACKUP_ENABLED}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - HELMET_ENABLED=${HELMET_ENABLED}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "3000:3000"
      - "9090:9090"
    networks:
      - zenith-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: zenith-trader-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - zenith-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: zenith-trader-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - zenith-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: zenith-trader-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - zenith-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: zenith-trader-backup
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - zenith-network
    depends_on:
      - postgres
    restart: "no"
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  zenith-network:
    driver: bridge
