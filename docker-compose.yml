version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zenith_trader_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zenith_trader_db}
      POSTGRES_USER: ${POSTGRES_USER:-zenith_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-zenith_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - zenith_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zenith_user} -d ${POSTGRES_DB:-zenith_trader_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zenith_trader_redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    networks:
      - zenith_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Zenith Trader Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: zenith_trader_app
    env_file:
      - .env.docker
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${APP_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-zenith_user}:${POSTGRES_PASSWORD:-zenith_password}@postgres:5432/${POSTGRES_DB:-zenith_trader_db}
      REDIS_URL: redis://redis:6379
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ZERION_API_KEY: ${ZERION_API_KEY}
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      OKX_API_KEY: ${OKX_API_KEY}
      OKX_SECRET_KEY: ${OKX_SECRET_KEY}
      OKX_PASSPHRASE: ${OKX_PASSPHRASE}
      GMAIL_USER: ${GMAIL_USER}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5177}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5177}
    ports:
      - "${APP_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zenith_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./prisma:/app/prisma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-3001}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: zenith_trader_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - zenith_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: zenith_trader_backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-zenith_trader_db}
      POSTGRES_USER: ${POSTGRES_USER:-zenith_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-zenith_password}
      S3_BUCKET: ${S3_BUCKET:-zenith-trader-backups}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./database/backups:/backups
      - ./database/scripts:/scripts
    depends_on:
      - postgres
    networks:
      - zenith_network
    restart: unless-stopped
    profiles:
      - backup
    command: |
      sh -c "
        while true; do
          echo 'Running database backup...'
          pg_dump -h postgres -U ${POSTGRES_USER:-zenith_user} -d ${POSTGRES_DB:-zenith_trader_db} > /backups/backup-\$$(date +%Y%m%d-%H%M%S).sql
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  zenith_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16



