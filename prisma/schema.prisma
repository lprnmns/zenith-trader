generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                      @id @default(autoincrement())
  email               String                   @unique
  password            String?
  role                Role                     @default(USER)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  googleId            String?                  @unique
  googleEmail         String?
  isActive            Boolean?                 @default(true)
  lastLoginAt         DateTime?
  
  // OKX API Credentials
  okxApiKey           String?
  okxApiSecret        String?
  okxPassphrase       String?
  
  PushSubscription    PushSubscription[]
  strategies          Strategy[]
  notifications       UserNotification[]
  watchedWallets      WatchedWallet[]
  subscription        UserSubscription?
  walletNotifications UserWalletNotification[]
  upgradeRequests     UpgradeRequest[]

  @@index([googleEmail], map: "User_googleEmail_key")
}

model WatchedWallet {
  id          Int      @id @default(autoincrement())
  address     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, address])
  @@index([userId])
}

model UserNotification {
  id            Int      @id @default(autoincrement())
  userId        Int
  walletAddress String
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, walletAddress])
  @@index([userId])
}

model SuggestedWallet {
  id                 Int      @id @default(autoincrement())
  address            String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  consistencyScore   Float    @default(0)
  lastAnalyzedAt     DateTime @default(now())
  name               String   @default("Unknown")
  riskLevel          String   @default("Medium")
  smartScore         Float?
  openPositionsCount Int      @default(0)
  pnlPercent180d     Float?
  pnlPercent1d       Float?
  pnlPercent30d      Float?
  pnlPercent365d     Float?
  pnlPercent7d       Float?
  totalValue         Float    @default(0)
}

model Strategy {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  walletAddress    String   @unique
  okxApiKey        String
  okxApiSecret     String
  okxPassphrase    String
  positionSize     Float
  leverage         Int      @default(5)
  allowedTokens    String[]
  isActive         Boolean  @default(true)
  lastChecked      DateTime @default(now())
  userId           Int
  exchange         String?  @default("OKX") @db.VarChar(255)
  copyMode         String?  @default("Perpetual") @db.VarChar(255)
  marginMode       String?  @default("cross") @db.VarChar(255)
  currentPnL       Float?   @default(0)
  totalPnL         Float?   @default(0)
  tradesCount      Int?     @default(0)
  sizingMethod     String?  @default("Fixed Amount") @db.VarChar(255)
  amountPerTrade   Float?
  percentageToCopy Float?
  stopLoss         Float?
  dailyLimit       Int?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades           Trade[]

  @@index([userId])
}

model Trade {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  strategyId Int
  action     String
  token      String
  amount     Float
  status     String
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId, createdAt(sort: Desc)])
}

model CopyTradingConfig {
  id            Int      @id @default(autoincrement())
  okxApiKey     String
  okxSecretKey  String
  okxPassphrase String
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("copy_trading_configs")
}

model UserWalletNotification {
  id            Int      @id @default(autoincrement())
  userId        Int
  walletAddress String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, walletAddress])
  @@index([userId])
  @@map("user_wallet_notifications")
}

model PositionSignal {
  id            Int         @id @default(autoincrement())
  walletAddress String
  signalType    String
  token         String
  amount        Decimal     @db.Decimal(20, 8)
  percentage    Decimal     @db.Decimal(10, 4)
  price         Decimal     @db.Decimal(20, 8)
  timestamp     DateTime
  processed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  copyTrades    CopyTrade[]

  @@index([walletAddress, timestamp])
  @@index([processed])
  @@map("position_signals")
}

model CopyTrade {
  id         Int            @id @default(autoincrement())
  signalId   Int
  okxOrderId String?
  status     String
  executedAt DateTime?
  createdAt  DateTime       @default(now())
  signal     PositionSignal @relation(fields: [signalId], references: [id], onDelete: Cascade)

  @@index([signalId])
  @@index([status])
  @@map("copy_trades")
}

model UserSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_subscriptions")
}

model PushSubscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  endpoint  String    @unique @db.VarChar(1000)
  p256dh    String    @db.VarChar(255)
  auth      String    @db.VarChar(255)
  keys      Json?
  userAgent String?
  isActive  Boolean?  @default(true)
  lastUsed  DateTime? @db.Timestamp(6)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([isActive])
  @@index([userId])
}

enum Role {
  ADMIN
  USER
}

model UpgradeRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  email       String
  contactInfo String?
  message     String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
